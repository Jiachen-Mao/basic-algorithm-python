## Combine two tables

SELECT FirstName, LastName, City, State 
FROM Person LEFT JOIN Address 
ON Person.PersonId = Address.PersonId



## Second highest salary

SELECT (SELECT MAX(Salary)
FROM Employee
WHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee)) SecondHighestSalary

SELECT (SELECT Salary FROM Employee GROUP BY Salary ORDER BY Salary DESC LIMIT 1,1) SecondHighestSalary



## Nth highest salary

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
	RETURN (
		SELECT MAX(Salary)
			FROM Employee Emp1
			WHERE (N - 1) = (
				SELECT COUNT(DISTINCT(Emp2.Salary))
					FROM Employee Emp2
					WHERE Emp2.Salary > Emp1.Salary)
	);
END



## Rank scores

SELECT Score, (SELECT COUNT(DISTINCT(Score)) FROM Scores b WHERE b.Score > a.Score) + 1 AS Rank
FROM Scores a
ORDER BY Score DESC



## Consecutive numbers

SELECT DISTINCT l1.Num AS ConsecutiveNums
FROM Logs l1, Logs l2, Logs l3
WHERE l1.Id + 1 = l2.Id AND l2.Id + 1 = l3.Id AND l1.Num = l2.Num AND l2.Num = l3.Num



## Employees earning more than their managers

SELECT e.Name AS Employee FROM Employee e LEFT JOIN Employee b
ON e.ManagerId = b.Id
WHERE e.Salary > b.Salary

SELECT Name AS Employee
FROM Employee e
WHERE e.ManagerId IS NULL AND e.Salary > (SELECT Salary FROM Employee WHERE e.ManagerId = Id)



## Duplicate emails

SELECT Email FROM Person GROUP BY Email HAVING COUNT(*) > 1



## Customers who never order

SELECT Name AS Customers FROM Customers WHERE Id NOT IN (SELECT CustomerID FROM Orders)

SELECT Customers.Name AS Customers 
FROM (Customers LEFT JOIN Orders ON Customers.Id = Orders.CustomerId)
WHERE Orders.CustomerId is NULL



## Department highest salary

SELECT Department.Name AS Department, Employee.Name AS Employee, Employee.Salary AS Salary
FROM Department JOIN Employee ON Employee.DepartmentId = Department.Id
WHERE Employee.Salary IN (SELECT MAX(e.Salary) FROM Employee e WHERE e.DepartmentId = Employee.DepartmentId)



## Department top three salaries

SELECT D.Name AS Deparment, E.Name AS Employee, E.Salary AS Salary
FROM Employee E INNER JOIN Department D ON E.DepartmentId = D.Id
WHERE (SELECT COUNT(DISTINCT(Salary)) FROM Employee
	WHERE DepartmentId = E.DepartmentId AND Salary > E.Salary) < 3
ORDER BY E.DepartmentId, E.Salary DESC;



## Delete duplicate emails

DELETE p1
FROM Person p1, Person p2
WHERE p1.Email = p2.Email AND p1.Id > p2.Id



## Rising temperature

SELECT wt1.Id
FROM Weather wt1, Weather wt2
WHERE wt1.Temperature > wt2.Temperature AND
	TO_DAYS(wt1.Date) - TO_DAYS(wt2.Date) = 1



## Trips and users

SELECT t.Request_at Day, ROUND(SUM(CASE WHEN t.Status = 'completed' THEN 0 ELSE 1 END) / COUNT(*), 2) Rate
FROM Trips t
INNER JOIN Users u
ON t.Client_Id = u.Users_Id AND u.Banned = 'No'
WHERE t.Request_at BETWEEN '2013-10-01' AND '2013-10-03'
GROUP BY t.Request_at



## 614 Second Degree Follower

SELECT DISTINCT b.follower, c.count NUM FROM follow b JOIN
(SELECT a.followee, count(DISTINCT follower) count FROM follow a GROUP BY a.followee) c ON (b.follower = c.followee)
ORDER BY b.follower



## 178 Rank Score

SELECT a.score Score, (SELECT COUNT(DISTINCT b.score) + 1 FROM scores b WHERE a.score < b.score) Rank FROM scores a ORDER BY a.score DESC



## 176 Second Highest Salary

SELECT MAX(Salary) AS SecondHighestSalary FROM Employee
WHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee)



## 627 Swap Salary

UPDATE salary SET sex = (CASE WHEN sex = 'f' THEN 'm' ELSE 'f' END)
SELECT * FROM salary



## 180 Consecutive Numbers

SELECT DISTINCT a.num AS ConsecutiveNums FROM logs a WHERE
a.num = (SELECT b.num FROM logs b WHERE b.id > a.id ORDER BY b.id LIMIT 1 OFFSET 0) AND
a.num = (SELECT c.num FROM logs c WHERE c.id > a.id ORDER BY c.id LIMIT 1 OFFSET 1)



## 585 Investments in 2016

SELECT SUM(tiv_2016) FROM insurance a LEFT OUTER JOIN
(SELECT b.lat, b.lon FROM insurance b GROUP BY b.lat, b.lon HAVING COUNT(*) > 1) c ON (a.lat = c.lat AND a.lon = c.lon) LEFT OUTER JOIN
(SELECT d.tiv_2015 FROM insurance d GROUP BY d.tiv_2015 HAVING COUNT(*) > 1) e ON (a.tiv_2015 = e.tiv_2015) WHERE c.lat IS NULL AND c.lon IS NULL AND e.tiv_2015 IS NOT NULL



## 610 Taiangle Judgement

SELECT x, y, z, IF(x + y > z AND y + z > x AND z + x > y, 'Yes', 'No') triangle FROM triangle



## 596 Classes more than 5 students

SELECT class FROM courses GROUP BY class HAVING COUNT(DISTINCT student) >= 5



## Combine two tables

SELECT p.FirstName, p.LastName, a.City, a.State FROM Person p
LEFT OUTER JOIN Address a ON (p.PersonId = a.PersonId)



## 579 Find Cumulative Salary of an Employee

SELECT e1.id, e1.month, (SELECT SUM(e2.salary) FROM employee e2 WHERE e2.id = e1.id and e2.month >= e1.month - 2 AND e2.month <= e1.month GROUP BY e2.id) Salary
FROM employee e1
WHERE e1.month NOT IN (SELECT MAX(e3.month) FROM employee e3 WHERE e3.id = e1.id)
GROUP BY e1.id, e1.month
ORDER BY e1.id ASC, e1.month DESC



## 184 Department Highest Salary

SELECT c.name AS Department, b.name AS Employee, b.salary AS Salary
FROM employee b, (SELECT departmentid, MAX(salary) AS max_salary FROM employee GROUP BY departmentid) a, department c
WHERE a.departmentid = b.departmentid AND a.max_salary = b.salary AND b.departmentid = c.id



## 183 Customers who never order

SELECT name AS customers FROM customers c
WHERE c.Id NOT IN (SELECT o.customerId FROM orders o)



## 570 Managers with at least 5 direct reports

SELECT a.name FROM employee a INNER JOIN employee b ON (a.id = b.managerid) GROUP BY a.name HAVING COUNT(DISTINCT b.id) >= 5



## 602 Friend Request II: Who has the most friends

SELECT a.requester_id id,
    (SELECT COUNT(1) FROM request_accepted b
    WHERE b.accepter_id = a.requester_id
    OR b_requester_id = a.requester_id
    ) num
FROM request_accepted a
ORDER BY num DESC
LIMIT 1



## 574 Winning Candidate

SELECT a.name FROM candidate a INNER JOIN
(SELECT candidateid, count(*) no_of_votes FROM vote
GROUP BY candidateid ORDER BY no_of_votes DESC LIMIT 1
) b ON a.id = b.candidateid



## 571 Find Median given a frequency of numbers

SELECT AVG(Number) median FROM Numbers n
WHERE n.Frequency >= ABS((SELECT SUM(Frequency) FROM Numbers WHERE
Number <= n.Number) - (SELECT SUM(Frequency) FROM Numbers WHERE Number >= n.Number))



## 578 Get Highest Answer Rate Question

SELECT question_id FROM
(SELECT a.question_id, SUM(IF(a.answer_id IS NULL, 0, 1)) / COUNT(a.question_id) ans_rate FROM survey_log a GROUP BY a.question_id) c
ORDER BY ans_rate DESC LIMIT 1



## 577 Employee Bonus

SELECT a.name, b.bonus
FROM employee a
LEFT OUTER JOIN bonus b ON (a.empid = b.empid)
WHERE IFNULL(bonus, -1) < 1000



## 580 Count student number in departments

SELECT a.dept_name, COALESCE(COUNT(student_id), 0) student_number
FROM department a LEFT JOIN student b ON (a.dept_id = b.dept_id)
GROUP BY a.dept_name
ORDER BY student_number DESC, a.dept_name ASC



## 603 Consecutive Available Seats

SELECT seat_id FROM
(
SELECT current.seat_id, CASE WHEN exists (SELECT 1 FROM cinema previous WHERE previous.seat_id = current.seat_id - 1 AND previous.free = 1) AND current.free = 1 THEN current.seat_id - 1 ELSE NULL END previous,
CASE WHEN exists (SELECT 1 FROM cinema next WHERE next.seat_id = current.seat_id + 1 AND next.free = 1) AND current.free = 1 THEN current.seat_id + 1 ELSE NULL END next
FROM cinema current
) seats
WHERE seats.previous IS NOT NULL OR seats.next IS NOT NULL



## 620 Not Boring Movies

SELECT id, movie, description, rating FROM cinema
WHERE id % 2 = 1 AND description NOT IN ('boring')
ORDER BY rating DESC



## 584 Find Customer Referee

SELECT a.name FROM customer a
LEFT OUTER JOIN customer b ON (a.referee_id = b.id)
WHERE IFNULL(a.referee_id, -1) != 1
ORDER BY a.id